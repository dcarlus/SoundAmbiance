// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_AMBIENCESCHEMA_H_
#define FLATBUFFERS_GENERATED_AMBIENCESCHEMA_H_

#include "flatbuffers/flatbuffers.h"

struct AmbienceData;

struct AmbienceData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_MAINSOUNDLOOPPATH = 4,
    VT_ADDITIONALSOUNDPATHS = 6
  };
  const flatbuffers::String *mainSoundLoopPath() const {
    return GetPointer<const flatbuffers::String *>(VT_MAINSOUNDLOOPPATH);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *additionalSoundPaths() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_ADDITIONALSOUNDPATHS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MAINSOUNDLOOPPATH) &&
           verifier.Verify(mainSoundLoopPath()) &&
           VerifyOffset(verifier, VT_ADDITIONALSOUNDPATHS) &&
           verifier.Verify(additionalSoundPaths()) &&
           verifier.VerifyVectorOfStrings(additionalSoundPaths()) &&
           verifier.EndTable();
  }
};

struct AmbienceDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_mainSoundLoopPath(flatbuffers::Offset<flatbuffers::String> mainSoundLoopPath) {
    fbb_.AddOffset(AmbienceData::VT_MAINSOUNDLOOPPATH, mainSoundLoopPath);
  }
  void add_additionalSoundPaths(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> additionalSoundPaths) {
    fbb_.AddOffset(AmbienceData::VT_ADDITIONALSOUNDPATHS, additionalSoundPaths);
  }
  explicit AmbienceDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AmbienceDataBuilder &operator=(const AmbienceDataBuilder &);
  flatbuffers::Offset<AmbienceData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AmbienceData>(end);
    return o;
  }
};

inline flatbuffers::Offset<AmbienceData> CreateAmbienceData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> mainSoundLoopPath = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> additionalSoundPaths = 0) {
  AmbienceDataBuilder builder_(_fbb);
  builder_.add_additionalSoundPaths(additionalSoundPaths);
  builder_.add_mainSoundLoopPath(mainSoundLoopPath);
  return builder_.Finish();
}

inline flatbuffers::Offset<AmbienceData> CreateAmbienceDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *mainSoundLoopPath = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *additionalSoundPaths = nullptr) {
  return CreateAmbienceData(
      _fbb,
      mainSoundLoopPath ? _fbb.CreateString(mainSoundLoopPath) : 0,
      additionalSoundPaths ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*additionalSoundPaths) : 0);
}

inline const AmbienceData *GetAmbienceData(const void *buf) {
  return flatbuffers::GetRoot<AmbienceData>(buf);
}

inline const AmbienceData *GetSizePrefixedAmbienceData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<AmbienceData>(buf);
}

inline bool VerifyAmbienceDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<AmbienceData>(nullptr);
}

inline bool VerifySizePrefixedAmbienceDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<AmbienceData>(nullptr);
}

inline void FinishAmbienceDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<AmbienceData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedAmbienceDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<AmbienceData> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_AMBIENCESCHEMA_H_
